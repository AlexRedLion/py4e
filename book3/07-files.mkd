Archivos
=====

\index{archivo}
\index{tipo!archivo}

Persistencia
-----------

\index{persistencia}
\index{memoria secundaria}

Hasta ahora, hemos aprendido como escribir programas y comunicar nuestras
intenciones a la *Unidad Central de Procesamiento* utilizando
ejecuciones condicionales, funciones, e iteraciones. Hemos aprendido como
crear y usar estructuras de datos en la *Memoria Principal*. El
CPU y la memoria están donde nuestro software funciona y ejecuta. Es donde toda
la *inteligencia* ocurre.

Pero si recuerdas nuestras discusiones de arquitectura de hardware, una vez
que la corriente se interrumpe, cualquier cosa almacenada ya sea en el CPU o en la memoria es
eliminada. Así que hasta ahora, nuestros programas han sido sólo una diversión
pasajera para aprender Python.

![Memoria Secundaria](height=2.5in@../images/arch)

En este capítulo, vamos a comenzar a trabajar con *Memoria Secundaria*
(o archivos). La memoria secundaria no es eliminada cuando apagamos
una computadora. O en el caso de una memoria USB, los datos que escribimos desde nuestros
programas pueden ser removidos del sistema y transportados a otro
sistema.

Nos vamos a enfocar principalmente en leer y escribir archivos como
los que creamos en un editor de texto. Después vamos a ver cómo trabajar con archivos
de bases de datos, que son archivos binarios diseñados específicamente para ser leídos
y escritos a través de software para manejo de bases de datos.

Abrir archivos
-------------

\index{archivo!abrir}
\index{abrir función}
\index{función!abrir}

Cuando queremos abrir o escribir un archivo (digamos, en el disco duro), primero
debemos *abrir* el archivo. Al abrir el archivo nos comunicamos con el
sistema operativo, el cual sabe dónde están almacenados los datos de cada
archivo. Cuando abres un archivo, le estás pidiendo al sistema operativo que
encuentre el archivo por su nombre y se asegure de que existe. En este ejemplo,
abrimos el archivo *mbox.txt*, el cual debería estar almacenado en el mismo
directorio en que estás localizado cuando inicias Python. Puedes descargar este
archivo desde [www.py4e.com/code3/mbox.txt](http://www.py4e.com/code3/mbox.txt)

~~~~ {.python}
>>> manejador_archivo = open('mbox.txt')
>>> print(manejador_archivo)
<_io.TextIOWrapper name='mbox.txt' mode='r' encoding='cp1252'>
~~~~

\index{manejador archivo}

Si el `open` es exitoso, el sistema operativo nos retorna un
*manejador de archivo*. El manejador de archivo no es los datos
contenidos en el archivo, sino un "manejador" que podemos usar para
leer los datos. Tendrás un manejador de archivo si el archivo solicitado
existe y si tienes los permisos apropiados para leerlo.

![Un Manejador de Archivo](height=2.0in@../images/handle)

Si el archivo no existe, `open` fallará con un mensaje de error
y no obtendrás un manejador para acceder el contenido del archivo:

~~~~ {.python}
>>> manejador_archivo = open('stuff.txt')
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'stuff.txt'
~~~~

Más adelante vamos a utilizar `try` y `except` para controlar de mejor
manera la situación donde tratamos de abrir un archivo que no existe.

Archivos de texto y líneas
--------------------

Un archivo de texto puede ser pensado como una secuencia de líneas, así como
una cadena de Python puede ser pensada como una secuencia de caracteres. Por ejemplo, este
es un ejemplo de un archivo de texto que registra la actividad de correos de varias
personas en un equipo de desarrollo de un proyecto de código abierto (open source):

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Return-Path: <postmaster@collab.sakaiproject.org>
Date: Sat, 5 Jan 2008 09:12:18 -0500
To: source@collab.sakaiproject.org
From: stephen.marquard@uct.ac.za
Subject: [sakai] svn commit: r39772 - content/branches/
Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
...
~~~~
El archivo completo de interacciones por correo está disponible en

[www.py4e.com/code3/mbox.txt](http://www.py4e.com/code3/mbox.txt)

y una versión recortada del archivo está disponible en

[www.py4e.com/code3/mbox-short.txt](http://www.py4e.com/code3/mbox-short.txt)

Esos archivos están en un formato estándar para un archivo que contiene múltiples
mensajes de correo. Las líneas que comienzan con "From:" son parte de los mensajes. Para más
información acerca del formato mbox, ve

<https://es.wikipedia.org/wiki/Mbox>.

Para separar el archivo en líneas, hay un caracter especial que
representa el "final de una línea" llamado *salto de línea*.

\index{saltodelinea}

En Python, representamos el *salto de línea* como una
barra invertida-n en las cadenas. Incluso aunque esto parezca dos
caracteres, realmente es un solo caracter. Cuando vemos la variable
interactuando con el intérprete, este nos muestra el `\n` en la
cadena, pero cuando usamos `print` para mostrar la cadena, vemos
la cadena separada en dos líneas debido al salto de línea.

~~~~ {.python}
>>> cosa = 'Hola\nMundo!'
>>> cosa
'Hola\nMundo!'
>>> print(cosa)
Hola
Mundo!
>>> cosa = 'X\nY'
>>> print(cosa)
X
Y
>>> len(cosa)
3
~~~~

También puedes ver que el tamaño de la cadena `X\nY` es *tres*
caracteres debido a que el separador de línea es un solo caracter.

Cuando vemos las líneas en un archivo, necesitamos *imaginar* que ahí
hay un caracter invisible llamada separador de línea al final de cada
línea, el cual marca el final de la línea.

De modo que el separador de línea separa los caracteres del archivo en
líneas.

Lectura de archivos
-------------

\index{archivo!lectura}
\index{contador}

Mientras que el *manejador de archivo* no contiene los datos de un
archivo, es bastante fácil construir in bucle `for` para leer
a través de y contar cada una de las líneas en el archivo:

\VerbatimInput{../code3/open.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Podemos usar el manejador de archivos como una secuencia en nuestro bucle `for`.
Nuestro bucle `for` simplemente cuenta el número de líneas en el archivo y
las imprime. La traducción aproximada de ese bucle
al español es, "para cada línea en el archivo representada por el manejador
de archivo, suma uno a la variable `count`."

La razón por la cual la función `open` no lee el archivo completo
es porque el archivo puede ser muy grande, incluso muchos gigabytes de datos.
La sentencia `open` toma la misma cantidad de tiempo sin importar
el tamaño del archivo. De hecho, el bucle `for` hace que los datos
sean leídos desde el archivo.

Cuando el archivo es leído usando un bucle `for` de esta manera,
Python se encarga de dividir los datos del archivo en líneas separadas
utilizando el separador de línea. Python lee cada línea a través del separador
e incluye el separador como el último caracter en la variable `line`
para cada iteración del bucle `for`.

Debido a que el bucle `for` lee los datos una línea a la vez, éste
puede leer eficientemente y contar las líneas en archivos muy grandes sin
quedarse sin memoria principal para almacenar los datos. El programa previo
puede contar las líneas de cualquier tamaño de archivo utilizando poca memoria, puesto
que cada línea es leída, contada, y después descartada.

Si sabes que el archivo es relativamente pequeño comparado al tamaño de tu
memoria principal, puedes leer el archivo completo en una sola cadena utilizando
el método `read` en el manejador de archivos.

~~~~ {.python}
>>> manejador_archivo = open('mbox-short.txt')
>>> inp = manejador_archivo.read()
>>> print(len(inp))
94626
>>> print(inp[:20])
From stephen.marquar
~~~~

En este ejemplo, el contenido completo (todos los 94,626 caracteres) del archivo
*mbox-short.txt* son leídos directamente en la variable
`inp`. Utilizamos recorte de cadenas para imprimir los primeros 20
caracteres de la cadena de datos almacenada en `inp`.

Cuando el archivo es leído de esta forma, todos los caracteres incluyendo
los saltos de línea son una cadena gigante en la variable
`inp`. Es una buena idea almacenar la salida de `read` como una variable
porque cada llamada a `read` vacía el contenido por completo:

~~~~ {.python}
>>> manejador = open('mbox-short.txt')
>>> print(len(manejador.read()))
94626
>>> print(len(manejador.read()))
0
~~~~

Recuerda que esta forma de la función `open` solo debe ser utilizada
si los datos del archivo son apropiados para la memoria principal del sistema.
Si el archivo es muy grande para caber en la memoria principal, deberías escribir
tu programa para leer el archivo en bloques utilizando un bucle `for` o `while`.

Búsqueda a través de un archivo
------------------------

Cuando buscas a través de los datos de un archivo, un patrón muy comun es
leer el archivo, ignorar la mayoría de las líneas y solamente procesar líneas que
que cumplen con una condición particular. Podemos combinar el patrón de
leer un archivo con métodos de cadenas para construir mecanismos de búsqueda
sencillos.

\index{filtro patron}
\index{patron!filtro}

Por ejemplo, si queremos leer un archivo y solamente imprimir las líneas que
comienzan con el prefijo "From:", podríamos usar el método de cadenas
*startswith* para seleccionar solo aquellas líneas con el prefijo
deseado:

\VerbatimInput{../code3/search1.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Cuando este programa corre, obtenemos la siguiente salida:

~~~~
From: stephen.marquard@uct.ac.za

From: louis@media.berkeley.edu

From: zqian@umich.edu

From: rjlowe@iupui.edu
...
~~~~

La salida se ve bien puesto que solo las líneas que estamos buscando son aquellas
que comienzan con "From:", pero, ¿por qué estamos viendo las líneas vacías extras?
Esto es debido al caracter invisible *salto de línea*. Cada una
de las líneas termina con un salto de línea, así que la sentencia
`print` imprime la cadena en la variable *line* la cual incluye una línea nueva,
y después `print` agrega *otro* salto de línea, resultando en
el efecto de doble salto de línea que observamos.

Podemos usar recorte de líneas para imprimir todos excepto el último caracter, pero
una forma más sencilla es usar el método *rstrip*, el cual
remueve los espacios en blanco del lado derecho de una cadena, tal como:

\VerbatimInput{../code3/search2.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Cuando este programa ejecuta, obtenemos lo siguiente:

~~~~
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
From: cwen@iupui.edu
...
~~~~

Así como tus programas de procesamiento de archivos se vuelven más complicados, quizá quieras
estructurar tus bucles de búsqueda utilizando `continue`. La idea básica de un
bucle de búsqueda es que estés buscando por líneas "interesantes" e
ignorando líneas "no interesantes". Después cuando encontramos una línea
interesante, hacemos algo con ella.

Podemos estructurar el bucle para seguir el patrón de ignorar las líneas
no interesantes así:

\VerbatimInput{../code3/search3.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

La salida del programa es la misma. En Español, las líneas no interesantes son
aquellas que no comienzan con "From:", así que las brincamos utilizando
`continue`. Para las líneas "de interés" (i.e., aquellas que comienzan con
"From:") haremos un procesamiento sobre ellas.

Podemos usar el método de cadenas `find` para simular una búsqueda de editor de texto
que encuentra líneas donde la cadena de búsqueda está en cualquier parte de la línea.
Puesto que `find` busca cualquier ocurrencia de una cadena dentro de
otra cadena, y retorna la posición de la cadena o -1 si la cadena no fue encontrada,
podemos escribir el siguiente bucle para mostrar las líneas que contienen la cadena
"@uct.ac.za" (i.e., los que vienen de la Universidad de Cape Town en Sudáfrica):

\VerbatimInput{../code3/search4.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Lo cual produce la siguiente salida:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
X-Authentication-Warning: set sender to stephen.marquard@uct.ac.za using -f
From: stephen.marquard@uct.ac.za
Author: stephen.marquard@uct.ac.za
From david.horwitz@uct.ac.za Fri Jan  4 07:02:32 2008
X-Authentication-Warning: set sender to david.horwitz@uct.ac.za using -f
From: david.horwitz@uct.ac.za
Author: david.horwitz@uct.ac.za
...
~~~~

Aquí utilizamos la forma contraída de la sentencia `if`
donde ponemos el `continue` en la misma línea que el `if`.
Esta forma contraída del `if` funciona de la misma manera que
si el `continue` estuviera en la siguiente línea e
indentado.


Permitiendo al usuario elegir el nombre de archivo
-------------------------------------

Definitivamente no queremos tener que editar nuestro código de Python cada vez que
queremos procesar un archivo diferente. Sería más útil pedir al usuario ingresar
el nombre archivo cada vez que el programa ejecuta, de modo que puede
usar nuestro programa en diferentes archivos sin tener que cambiar el código de Python.

Esto es sencillo de hacer al leer el nombre de archivo del usuario utilizando
`input` como se muestra a continuación:

\VerbatimInput{../code3/search6.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Leemos al nombre de archivo del usuario y lo guardamos en una variable llamada
`fname` y abrimos el archivo. Ahora podemos ejecutar el programa
repetidamente en diferentes archivos.

~~~~
python search6.py
Enter the file name: mbox.txt
There were 1797 subject lines in mbox.txt

python search6.py
Enter the file name: mbox-short.txt
There were 27 subject lines in mbox-short.txt
~~~~

Antes de asomarte a la siguiente sección, observa el programa debajo y
pregúntate a tí mismo, "¿Qué error podría pasar aquí?" o "¿Qué podría
nuestro amigable usuario hacer que podría causar que nuestro pequeño programa
termine no existosamente con un error, haciéndonos ver no-muy-geniales ante
los ojos de nuestros usuarios?"

Utilizando `try, except,` y `open`
-----------------------------------------------------

Te dije que no miraras. Esta es tu última oportunidad.

¿Qué tal si nuestro usuario escribe algo que no es un nombre de archivo?

~~~~
python search6.py
Enter the file name: missing.txt
Traceback (most recent call last):
  File "search6.py", line 2, in <module>
    fhand = open(fname)
FileNotFoundError: [Errno 2] No such file or directory: 'missing.txt'

python search6.py
Enter the file name: na na boo boo
Traceback (most recent call last):
  File "search6.py", line 2, in <module>
    fhand = open(fname)
FileNotFoundError: [Errno 2] No such file or directory: 'na na boo boo'
~~~~

No te rías. Los usuarios eventualmente harán cualquier cosa que puedan
para estropear tus programas, sea intencionalmente o con intenciones maliciosas. Como un
hecho, una parte importante de cualquier equipo de desarrollo de software es una
persona o grupo llamado *Quality Assurance* (Control de Calidad) (o QA en inglés) cuyo trabajo es hacer las cosas
más locas posibles en un intento de hacer fallar el software que el programador ha creado.

\index{Control de Calidad}
\index{QA}

El equipo de QA (Control de Calidad) es responsable de encontrar las fallas en programas antes de
que hayamos entregado el programa a los usuarios finales que podrían comprar el software o pagar nuestro salario
para escribir el software. Así que el equipo de QA es el mejor amigo de un programador.

\index{try sentencia}
\index{sentencia!try}
\index{abrir funcion}
\index{funcion!abrir}
\index{excepcion!IOError}
\index{IOError}

Ahora que vemos el defecto en el programa, podemos arreglarlo de forma elegante utilizando
la estructura `try`/`except`. Necesitamos asumir que
la llamada a `open` podría fallar por lo que agregaremos código de recuperación
cuando la llamada `open` falla así:

\VerbatimInput{../code3/search7.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

La función `exit` termina el programa. Es una función
que llamamos que nunca retorna. Ahora cuando nuestro usuario (o el equipo de QA) ingrese
algo sin sentido o un nombre de archivo incorrecto, vamos a "atraparlos" y recuperarnos
de forma elegante:

~~~~
python search7.py
Enter the file name: mbox.txt
There were 1797 subject lines in mbox.txt

python search7.py
Enter the file name: na na boo boo
File cannot be opened: na na boo boo
~~~~

\index{Pythonic}

Protegiendo la llamada a `open` es un buen ejemplo de un manejo apropiado
del uso de `try` y `except` en un programa de Python. Utilizamos
el término "Pythonico" cuando estamos haciendo algo en el "estilo de Python".
Podríamos decir que el ejemplo anterior es una forma Pythonica de abrir un archivo.

Una vez que estés más familiarizado en Python, puedes intercambiar opiniones con
otros programadores de Python para decidir cuál de entre dos soluciones equivalentes a
un problema es "más Pythonica". El objetivo de ser "más Pythonico" engloba la noción
de que programar es en parte ingeniería y en parte arte. No siempre estamos interesados
en sólo hacer que algo funcione, también queremos que nuestra solución sea elegante y
sea apreciada como elegante por nuestros compañeros.

Escritura de archivos
-------------

\index{archivo!escritura}

Para escribir un archivo, tienes que abrirlo en modo "w" como segundo
parámetro:

~~~~ {.python}
>>> fout = open('salida.txt', 'w')
>>> print(fout)
<_io.TextIOWrapper name='salida.txt' mode='w' encoding='cp1252'>
~~~~

Si el archivo ya existía previamente, abrirlo en modo de escritura causará que se borre
todo el contenido del archivo, así que ¡ten cuidado! Si el archivo no existe, un
nuevo archivo es creado.

El método `write` del manejador de archivos coloca datos dentro
del archivo, regresando el número de caracteres escritos. El modo de escritura
por defecto es texto para escribir (y leer) cadenas.

~~~~ {.python}
>>> linea1 = "This here's the wattle,\n"
>>> fout.write(linea1)
24
~~~~

\index{saltodelinea}

De nuevo, el objeto de archivo mantiene seguimiento de dónde está, así que
si tu llamas `write` de nuevo, éste agrega los nuevos datos al final.

Debemos estar seguros de manejar los finales de línea conforme vamos escribiendo
al archivo insertando explícitamente el caracter de salto de línea que queremos al final de la línea.
La sentencia `print` agrega un salto de línea automáticamente, pero
el método `write` no agrega el salto de línea de forma automática.

~~~~ {.python}
>>> linea2 = 'the emblem of our land.\n'
>>> fout.write(linea2)
24
~~~~

Cuando terminas de escribir, tienes que cerrar el archivo para asegurarte que
la última parte de los datos es físicamente escrita en el disco duro, de modo que
no se pierdan los datos si se apaga la computadora.

~~~~ {.python}
>>> fout.close()
~~~~

Debemos cerrar los archivos que abrimos para lectura también, pero podemos ser un
poco rigurosos si sólo estamos abriendo algunos archivos puesto que Python se asegura
que todos los archivos abiertos sean cerrados cuando termina el programa. Cuando estamos
escribiendo archivos, queremos de forma explícita cerrar los archivos para no dejar lugar
a nada.

\index{cerrar metodo}
\index{metodo!cerrar}

Depuración
---------

\index{depuracion}
\index{espacioenblanco}

Cuando estás leyendo y escribiendo archivos, puedes tener problemas con los
espacios en blanco. Esos errores pueden ser difíciles de depurar debido a que los
espacios, tabuladores, y saltos de línea son invisibles normalmente:

~~~~ {.python}
>>> s = '1 2\t 3\n 4'
>>> print(s)
1 2  3
 4
~~~~

\index{repr funcion}
\index{funcion!repr}
\index{cadena representacion}

La función nativa `repr` puede ayudar. Toma cualquier objeto como
argumento y regresa una representación del objecto como una cadena. Para
cadenas, representa los espacios en blanco con sequencias de barras invertidas:

~~~~ {.python}
>>> print(repr(s))
'1 2\t 3\n 4'
~~~~

Esto puede ser útil para depurar.

Otro problema que podrías tener es que diferentes sistemas usan
diferentes caracteres para indicar el final de una línea. Algunos sistemas
usan un salto de línea, representado como `\n`. Otros usan un caracter de retorno, representado con
`\r`. Algunos usan ambos. Si mueves archivos entre diferentes sistemas, esas
inconsistencias podrían causar problemas.

\index{caracter final de linea}

Para la mayoría de los sistemas, hay aplicaciones que convierten de un formato a
otro. Puedes encontrarlas (y leer más acerca de esto) en [wikipedia.org/wiki/Newline](wikipedia.org/wiki/Newline). O también,
por supuesto, puedes escribir una tu mismo.

Glosario
--------

catch
:   Para prevenir una excepción de terminar un programa usando las sentencias
    `try` y `except`.
\index{catch}

nueva linea
:   Un caracter especial utilizado en archivos y cadenas para indicar el final de
    una línea.
\index{nueva linea}

Pythonico
:   Una técnica que funciona de forma elegante en Python. "Utilizar try y except es
    la forma *Pythonica* de recuperarse de archivos inexistentes".
\index{Pythonic}

Control de calidad
:   Una persona o equipo enfocado en asegurar la calidad en general de un
    producto de software. Control de calidad (QA) es frecuentemente involucrado en probar
    un producto e identificar problemas antes de que el producto sea lanzado.
\index{Control de calidad}
\index{QA}

archivo de texto
:   Una secuencia de caracteres almacenados en un dispositivo de almacenamiento permanente
    como un disco duro.
\index{archivo de texto}

Ejercicios
---------

**Ejercicio 1: Escribir un programa para leer a través de un archivo e imprimir el
contenido del archivo (línea por línea) todo en mayúsculas. Al ejecutar el
programa, debería verse así:**

~~~~
python shout.py
Ingresa un nombre de archivo: mbox-short.txt
FROM STEPHEN.MARQUARD@UCT.AC.ZA SAT JAN  5 09:14:16 2008
RETURN-PATH: <POSTMASTER@COLLAB.SAKAIPROJECT.ORG>
RECEIVED: FROM MURDER (MAIL.UMICH.EDU [141.211.14.90])
     BY FRANKENSTEIN.MAIL.UMICH.EDU (CYRUS V2.3.8) WITH LMTPA;
     SAT, 05 JAN 2008 09:14:16 -0500
~~~~

**Puedes descargar el archivo desde** [www.py4e.com/code3/mbox-short.txt](http://www.py4e.com/code3/mbox-short.txt)

**Ejercicio 2: Escribir un programa que pregunta por un nombre de archivo, y después lee
a través del archivo y busca las líneas que tengan la siguiente forma:**

~~~~
X-DSPAM-Confidence: 0.8475
~~~~

**Cuando encuentres una línea que comience con "X-DSPAM-Confidence:" ponla
aparte para extraer el número flotante de la línea. Cuenta esas líneas y después
calcula el total de los valores de "spam-confidence". Cuando llegues al final del archivo,
imprime el promedio de los valores de "spam confidence".

~~~~
Ingresa un nombre de archivo: mbox.txt
Promedio spam confidence: 0.894128046745

Ingresa un nombre de archivo: mbox-short.txt
Promedio spam confidence: 0.750718518519
~~~~

**Prueba tu programa con los archivos *mbox.txt* y *mbox-short.txt*.**

**Ejercicio 3: Algunas veces cuando los programadores se aburren o quieren tener un poco de
diversión, agregan un inofensivo *Huevo de pascua* a su programa.
Modifica el programa que pregunta al usuario por el nombre de archivo de modo que
imprima un mensaje divertido cuando el usuario escriba "na na
boo boo" como nombre de archivo. El programa debería funcionar normalmente para cualquier archivo
que exista o no exista. Aquí está un ejemplo de la ejecución del programa:**

~~~~
python huevo.py
Ingresa un nombre de archivo: mbox.txt
Hay 1797 líneas de asunto en mbox.txt

python huevo.py
Ingresa un nombre de archivo: inexistente.tyxt
El archivo no puede ser abierto: inexistente.tyxt

python huevo.py
Ingresa un nombre de archivo: na na boo boo
NA NA BOO BOO PARA TI - Te he atrapado!
~~~~

**No te estamos inculcando a poner Huevos de pascua en tus programas; es sólo un
ejercicio.**

