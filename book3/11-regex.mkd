Expresiones regulares
===================

Hasta ahora hemos leído archivos, buscando patrones y 
extrayendo varias secciones de líneas que hemos encontrado interesantes. Hemos 

usado métodos de cadenas como `split` y `find`, así como 
rebanar listas y cadenas para extraer trozos de las líneas.

\index{expresiones regulares}
\index{regex}
\index{re module}

Esta tarea de buscar y extraer es tan común que Python tiene una
librería muy poderosa llamada *expresiones regulares* que
maneja varias de estas tareas de manera bastante elegante. La razón por la que no
presentamos las expresiones regulares antes se debe a que, aunque son
muy poderosas, son un poco más complicadas y toma algo de tiempo
acostumbrarse a su sintaxis.

Las expresiones regulares casi son su propio lenguaje de programación en miniatura para
buscar y analizar cadenas. De hecho, se han escrito libros enteros
sobre las expresiones regulares. En este capítulo, solo
cubriremos los aspectos básicos de las expresiones regulares. Para más información
al respecto, recomendamos ver:


<https://es.wikipedia.org/wiki/Expresi%C3%B3n_regular>

<https://docs.python.org/library/re.html>

Se debe importar la librería de expresiones regulares `re`
a tu programa antes de que puedas usarlas. La forma más simple de usar
la librería de expresiones regulares es la función `search()` (N. del T.: "search" significa búsqueda). El siguiente
programa demuestra una forma muy sencilla de usar esta función.


\index{regex!search}

\VerbatimInput{../code3/re01.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Abrimos el archivo, revisamos cada línea, y usamos la expresión regular
`search()`  para imprimir solo las líneas que contengan la cadena
"From". Este programa no toma ventaja del auténtico poder de las
expresiones regulares, ya que podríamos simplemente haber usado
`line.find()` para lograr el mismo resultado.

\index{string!find}

El poder de las expresiones regulares se manifiesta cuando agregamos
caracteres especiales a la cadena de búsqueda que nos permite controlar de manera
más precisa qué líneas calzan con la cadena. Agregar estos caracteres especiales 
a nuestra expresión regular nos permitirá buscar coincidencias y extraer datos
usando unas pocas líneas de código.


Por ejemplo, el signo de intercalación (N. del T.: "caret" en inglés, corresponde
al signo ^) se utiliza en expresiones regulares para encontrar 
"el comienzo" de una lína. Podríamos cambiar nuestro programa para que solo 
retorne líneas en que tengan "From:"  al comienzo, de la siguiente manera:

\VerbatimInput{../code3/re02.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Ahora solo retornará líneas que *comiencen con* la cadena
"From:". Este sigue siendo un ejemplo muy sencillo que podríamos haber implementado
usando el método `startswith()` de la librería de cadenas.
Pero sirve para presentar la idea de que las expresiones regulares
contienen caracteres especiales que nos dan mayor control sobre qué 
coincidencias retornará la expresión regular.
will match the regular expression.

\index{string!startswith}


Coincidencia de caracteres en expresiones regulares
-----------------------------------------

Existen varios caracteres especiales que nos permiten construir
expresiones regulares incluso más poderosas. El más común es
el punto, que coincide con cualquier carácter.

\index{wild card}
\index{regex!wild card}

En el siguiente ejemplo, la expresión regular `F..m:` coincidiría con
las cadenas "From:", "Fxxm:", "F12m:", o "F!@m:", ya que los caracteres
de punto en la expresión regular coinciden con cualquier carácter.

\VerbatimInput{../code3/re03.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Esto resulta particularmente poderoso cuando se le combina con la habilidad de indicar
que un carácter puede repetirse cualquier cantidad de veces usando los 
caracteres `*` o `+` en tu expresión regular. Estos caracteres especiales indican
que en lugar de coincidir con un solo carácter en la cadena de búsqueda,
coinciden con cero o más caracteres (en el caso del asterisco) o
con uno o más caracteres (en el caso del signo de suma).

Podemos reducir más las líneas que coincidan usando un carácter *comodín*
en el siguiente ejemplo:

\VerbatimInput{../code3/re04.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

La cadena `^From:.+@` retornará coincidencias con líneas que empiecen
con "From:", seguidas de uno o más caracteres (`.+`), seguidas de un
carácter @. Por lo tanto, la siguiente línea coincidirá:

~~~~
From: stephen.marquard@uct.ac.za
~~~~

Puede considerarse que el comodín `.+` se expande para abarcar
todos los caracteres entre los signos : y @.

~~~~
From:.+@
~~~~

Conviene considerar que los signos de suma y los asteriscos "empujan".
Por ejemplo, la siguiente cadena marcaría una coincidencia con el último signo @,
ya que el `.+` "empujan" hacia afuera, como se muestra a continuación:

~~~~
From: stephen.marquard@uct.ac.za, csev@umich.edu, and cwen @iupui.edu
~~~~

Es posible indicar a un asterisco o signo de suma que no debe ser tan "ambicioso"
agregando otro carácter. Revisa la documentación para obtener información
sobre cómo desactivar este comportamiento ambicioso.

\index{ambicioso}

Extrayendo datos usando expresiones regulares
-----------------------------------------

Si queremos extraer datos de una cadena en Python podemos usar el método
`findall()` para extraer todas las subcadenas que
coincidan con una expresión regular. Usemos el ejemplo de querer extraer
cualquier secuencia que parezca una dirección email en cualquier línea,
sin importar su formato. Por ejemplo, queremos extraer la dirección email
de cada una de las siguientes líneas:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Return-Path: <postmaster@collab.sakaiproject.org>
          for <source@collab.sakaiproject.org>;
Received: (from apache@localhost)
Author: stephen.marquard@uct.ac.za
~~~~

No queremos escribir código para cada tipo de líneas, dividiendo y
rebanando de manera distinta en cada una. El siguiente programa usa
`findall()` para encontrar las líneas que contienen direcciones de email
y extraer una o más direcciones de cada línea.

\index{findall}
\index{regex!findall}

\VerbatimInput{../code3/re05.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

El método `findall()` busca en la cadena en el segundo
argumento y retorna una lista de todas las cadenas que parecen
ser direcciones de email. Estamos usando una secuencia de dos caracteres
que coincide con un carácter distinto a un espacio en blanco (`\S`).

El resultado de la ejecución del programa debiera ser:

~~~~
['csev@umich.edu', 'cwen@iupui.edu']
~~~~

Traduciendo la expresión regular al castellano, estamos buscando subcadenas que
tengan al menos un carácter que no sea un espacio, seguido de una @,
seguido de al menos un carácter que no sea un espacio. La expresión
`\S+` coincidirá con cuantos caracteres distintos de un espacio sea 
posible.

 La expresión regular retornaría dos coincidencias (csev@umich.edu y
cwen@iupui.edu), pero no coincidiría con la cadena "@2PM" porque no
hay caracteres que no sean espacios en blanco *antes* del signo @. Podemos
usar esta expresión regular en un programa para leer todas las líneas en un archivo
e imprimir cualquier subcadena que pudiera ser una dirección de email de la siguiente manera:

\VerbatimInput{../code3/re06.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Con esto, leemos cada línea y luego extraemos las subcadenas que coincidan con
nuestra expresión regular. Dado que `findall()` retorna una lista,
simplemente revisamos si el número de elementos en ésta es mayor
a cero e imprimir solo líneas donde encontramos al menos una subcadena
que pudiera ser una dirección de email.

Si ejecutamos el programa en *mbox.txt* obtendremos el siguiente
resultado:

~~~~
['wagnermr@iupui.edu']
['cwen@iupui.edu']
['<postmaster@collab.sakaiproject.org>']
['<200801032122.m03LMFo4005148@nakamura.uits.iupui.edu>']
['<source@collab.sakaiproject.org>;']
['<source@collab.sakaiproject.org>;']
['<source@collab.sakaiproject.org>;']
['apache@localhost)']
['source@collab.sakaiproject.org;']
~~~~

Algunas de las direcciones tienen caracteres incorrectos como "<" o ";"
al comienzo o al final. Declaremos que solo estamos interesados en 
la parte de la cadena que comience y termine con una letra o
un número.

Para lograr esto, usamos otra característica de las expresiones regulares.
Los corchetes se usan para indicar un conjunto de caracteres que
queremos aceptar como coincidencias. La secuencia `\S` retornará
el conjunto de "caracteres que no sean un espacio en blanco". Ahora seremos
un poco más explícitos en cuanto a los caracteres respecto de los cuales buscamos coincidencias.

Esta será nuestra nueva expresión regular:

~~~~
[a-zA-Z0-9]\S*@\S*[a-zA-Z]
~~~~

Esto se está complicando un poco; puedes ver por qué
decimos que las expresiones regulares son un lenguaje en sí mismas.
Traduciendo esta expresión regular, estamos buscando subcadenas que
comiencen con *una* letra minúscula, letra mayúscula,
o número "[a-zA-Z0-9]", seguida de cero o más caracteres que no sean un espacio
(`\S*`), seguidos de un signo @, seguido de cero o más
caracteres que no sean espacios en blanco (`\S*`), seguidos por una letra
mayúscula o minúscula. Nótese que hemos cambiado de `+` a `*` para indicar
cero o más caracteres que no sean espacios, ya que `[a-zA-Z0-9]` implica un
carácter distinto de un espacio. Recuerda que el `*` o `+` se aplica al 
carácter inmediatamente a la izquierda del signo de suma o del asterisco.

\index{regex!character sets(brackets)}

Si usamos esta expresión en nuestro programas, nuestros datos 
quedarán mucho más depurados:

\VerbatimInput{../code3/re07.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

~~~~
...
['wagnermr@iupui.edu']
['cwen@iupui.edu']
['postmaster@collab.sakaiproject.org']
['200801032122.m03LMFo4005148@nakamura.uits.iupui.edu']
['source@collab.sakaiproject.org']
['source@collab.sakaiproject.org']
['source@collab.sakaiproject.org']
['apache@localhost']
~~~~

Nótese que en las líneas donde aparece `source@collab.sakaiproject.org`, nuestra expresión
regular eliminó dos caracteres al final de la cadena (">;").
Esto se debe a que, cuando agregamos `[a-zA-Z]` al final de nuestra expresión
regular, estamos determinando que cualquier cadena que la expresión regular
encuentre al analizar el texto debe terminar con una letra. Por lo tanto, 
cuando vea el ">" al final de "sakaiproject.org>;", simplemente se detiene en
el último carácter que haya encontrado que coincida con ese criterio
(en este caso, la "g" fue la última coincidencia).

Nótese también que el resultado de la ejecución del programa es 
una lista de Python que tiene una cadena como su único elemento.

Combinando búsqueda y extracción
----------------------------------

Si quisiéramos encontrar los números en las líneas que empiecen con la 
cadena "X-", como por ejemplo:

~~~~
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
~~~~

no queremos cualquier número de coma flotante contenidos en cualquier línea. Solo
queremos extraer los números de las líneas que tienen la sintaxis ya mencionada.

Podemos construir la siguiente expresión regular para seleccionar las líneas:

~~~~
^X-.*: [0-9.]+
~~~~

Traduciendo esto, estamos diciendo que queremos líneas que empiecen con `X-`,
seguido por cero o más caracteres (`.*`), seguido por un carácter de dos puntos (`:`)
y luego un espacio. Después del espacio, buscamos uno o más caracteres
que sean, o bien un dígito (0-9), o bien un punto `[0-9.]+`. Nótese que
al interior de los corchetes el punto efectivamente corresponde a un punto
(es decir, no funciona como comodín entre corchetes).

La siguiente es una expresión bastante comprimida que solo retornará
las líneas que nos interesan:

\VerbatimInput{../code3/re10.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Cuando ejecutamos el programa, vemos que los datos han sido procesados,
mostrando solo las líneas que buscamos.

~~~~
X-DSPAM-Confidence: 0.8475
X-DSPAM-Probability: 0.0000
X-DSPAM-Confidence: 0.6178
X-DSPAM-Probability: 0.0000
~~~~

Ahora, debemos resolver el problema de extraer los númueros. Aunque sería
bastante sencillo usar `split`, podemos echar mano
a otra función de las expresiones regulares para buscar y analizar la línea
a la vez.

\index{string!split}

Los paréntesis son otros caracteres especiales en las expresiones regulares. Al
agregar paréntesis a una expresión regular, son ignorados a la hora de
hacer coincidir la cadena. Pero cuando se usa `findall()`,
los paréntesis indican que, aunque se quiere que toda la expresión coincida,
solo interesa extraer una parte de la subcadena que 
coincida con la expresión regular.

\index{regex!paréntesis}
\index{paréntesis!expresión regular}

Entonces, hacemos los siguientes cambios a nuestro programa:

\VerbatimInput{../code3/re11.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

En lugar de usar `search()`, agregamos paréntesis alrededos de
la parte de la expresión regular que representa al número de coma flotante
para indicar que solo queremos que `findall()` retorne la parte 
correspondiente a números de coma flotante de la cadena retornada.

El resultado de este programa es el siguiente:

~~~~
['0.8475']
['0.0000']
['0.6178']
['0.0000']
['0.6961']
['0.0000']
..
~~~~

Los números siguen estando en una lista y deben ser convertidos de cadenas
a números de coma flotante, pero hemos usado las expresiones regulares
para buscar y extraer la información que consideramos interesante.

Otro ejemplo de esta técnica: si revisan este archivo,
verán una serie de líneas en el formulario:

~~~~
Detalles: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
~~~~

Si quisiéramos extraer todos los números de revisión (el número entero
al final de esas líneas) usando la misma técnica del ejemplo anterior, 
podríamos escribir el siguiente programa:

\VerbatimInput{../code3/re12.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Traducción de la expresión regular: estamos buscando líneas que empiecen
con `Details:`, seguida de cualquier número de caracteres (`.*`), seguida
de `rev=`, y después de uno o más dígitos. Queremos encontrar líneas que
coincidan con toda la expresión pero solo queremos extraer el número
entero al final de la línea, por lo que ponemos `[0-9]+` entre paréntesis.

Al ejecutar el programa, obtenemos el siguiente resultado:

~~~~
['39772']
['39771']
['39770']
['39769']
...
~~~~

Recuerda que la expresión `[0-9]+`  es "ambiciosa" e intentará formar
una cadena de dígitos lo más larga posible antes de extraerlos. Este
comportamiento "ambicioso" es la razón por la que obtenemos los cinco dígitos de cada número.
La expresiones regular se expande en ambas direcciones hasta que
encuentra, o bien un carácter que no sea un dígito,
o bien el comienzo o final de una línea.

Ahora podemos usar expresiones regulares para volver a resolver un ejercicio
que hicimos antes, en el que nos interesaba la hora de cada email.
En su momento, buscamos las líneas:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
~~~~

and wanted to extract the hour of the day for each line. Previously we
did this with two calls to `split`. First the line was split
into words and then we pulled out the fifth word and split it again on
the colon character to pull out the two characters we were interested
in.

While this worked, it actually results in pretty brittle code that is
assuming the lines are nicely formatted. If you were to add enough error
checking (or a big try/except block) to insure that your program never
failed when presented with incorrectly formatted lines, the code would
balloon to 10-15 lines of code that was pretty hard to read.

We can do this in a far simpler way with the following regular
expression:

~~~~
^From .* [0-9][0-9]:
~~~~

The translation of this regular expression is that we are looking for
lines that start with `From ` (note the space), followed by any number
of characters (`.*`), followed by a space, followed by two digits
`[0-9][0-9]`, followed by a colon character. This is the definition of
the kinds of lines we are looking for.

In order to pull out only the hour using `findall()`, we add
parentheses around the two digits as follows:

~~~~
^From .* ([0-9][0-9]):
~~~~

This results in the following program:

\VerbatimInput{../code3/re13.py} 
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

When the program runs, it produces the following output:

~~~~
['09']
['18']
['16']
['15']
...
~~~~

Escape character
----------------

Since we use special characters in regular expressions to match the
beginning or end of a line or specify wild cards, we need a way to
indicate that these characters are "normal" and we want to match the
actual character such as a dollar sign or caret.

We can indicate that we want to simply match a character by prefixing
that character with a backslash. For example, we can find money amounts
with the following regular expression.

~~~~ {.python}
import re
x = 'We just received $10.00 for cookies.'
y = re.findall('\$[0-9.]+',x)
~~~~

Since we prefix the dollar sign with a backslash, it actually matches
the dollar sign in the input string instead of matching the "end of
line", and the rest of the regular expression matches one or more digits
or the period character. *Note:* Inside square brackets,
characters are not "special". So when we say `[0-9.]`, it really means
digits or a period. Outside of square brackets, a period is the
"wild-card" character and matches any character. Inside square brackets,
the period is a period.

Summary
-------

While this only scratched the surface of regular expressions, we have
learned a bit about the language of regular expressions. They are search
strings with special characters in them that communicate your wishes to
the regular expression system as to what defines "matching" and what is
extracted from the matched strings. Here are some of those special
characters and character sequences:

`^` Matches the beginning of the line.

`$` Matches the end of the line.

`.` Matches any character (a wildcard).

`\s` Matches a whitespace character.

`\S` Matches a non-whitespace character (opposite of \\s).

`*` Applies to the immediately preceding character(s) and indicates to match
zero or more times.

`*?` Applies to the immediately preceding character(s) and indicates to
match zero or more times in "non-greedy mode".

`+` Applies to the immediately preceding character(s) and indicates to match
one or more times.

`+?` Applies to the immediately preceding character(s) and indicates to
match one or more times in "non-greedy mode".

`?` Applies to the immediately preceding character(s) and indicates to match
zero or one time.

`??` Applies to the immediately preceding character(s) and indicates to
match zero or one time in "non-greedy mode".

`[aeiou]` Matches a single character as long as that character is in the
specified set. In this example, it would match "a", "e", "i", "o", or
"u", but no other characters.

`[a-z0-9]` You can specify ranges of characters using the minus sign. This
example is a single character that must be a lowercase letter or a
digit.

`[^A-Za-z]` When the first character in the set notation is a caret, it
inverts the logic. This example matches a single character that is
anything *other than* an uppercase or lowercase letter.

`( )` When parentheses are added to a regular expression, they are ignored
for the purpose of matching, but allow you to extract a particular
subset of the matched string rather than the whole string when using
`findall()`.

`\b` Matches the empty string, but only at the start or end of a word.

`\B` Matches the empty string, but not at the start or end of a word.

`\d` Matches any decimal digit; equivalent to the set [0-9].

`\D` Matches any non-digit character; equivalent to the set [^0-9].

Bonus section for Unix / Linux users
------------------------------------

Support for searching files using regular expressions was built into the
Unix operating system since the 1960s and it is available in nearly all
programming languages in one form or another.

\index{grep}

As a matter of fact, there is a command-line program built into Unix
called *grep* (Generalized Regular Expression Parser)
that does pretty much the same as the `search()` examples in
this chapter. So if you have a Macintosh or Linux system, you can try
the following commands in your command-line window.

~~~~ {.bash}
$ grep '^From:' mbox-short.txt
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
~~~~

This tells `grep` to show you lines that start with the
string "From:" in the file *mbox-short.txt*. If you
experiment with the `grep` command a bit and read the
documentation for `grep`, you will find some subtle
differences between the regular expression support in Python and the
regular expression support in `grep`. As an example,
`grep` does not support the non-blank character
`\S` so you will need to use the slightly more complex set
notation `[^ ]`, which simply means match a character that is anything
other than a space.

Debugging
---------

Python has some simple and rudimentary built-in documentation that can
be quite helpful if you need a quick refresher to trigger your memory
about the exact name of a particular method. This documentation can be
viewed in the Python interpreter in interactive mode.

You can bring up an interactive help system using `help()`.

~~~~ {.python}
>>> help()

help> modules
~~~~

If you know what module you want to use, you can use the
`dir()` command to find the methods in the module as follows:

~~~~ {.python .trinket}
>>> import re
>>> dir(re)
[.. 'compile', 'copy_reg', 'error', 'escape', 'findall',
'finditer', 'match', 'purge', 'search', 'split', 'sre_compile',
'sre_parse', 'sub', 'subn', 'sys', 'template']
~~~~

You can also get a small amount of documentation on a particular method
using the dir command.

~~~~ {.python .trinket}
>>> help (re.search)
Help on function search in module re:

search(pattern, string, flags=0)
    Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found.
>>>
~~~~

The built-in documentation is not very extensive, but it can be helpful
when you are in a hurry or don't have access to a web browser or search
engine.

Glossary
--------

brittle code
:   Code that works when the input data is in a particular format but is
    prone to breakage if there is some deviation from the correct
    format. We call this "brittle code" because it is easily broken.

greedy matching
:   The notion that the `+` and `*` characters in a regular expression
    expand outward to match the largest possible string.
\index{greedy}
\index{greedy matching}

grep
:   A command available in most Unix systems that searches through text
    files looking for lines that match regular expressions. The command
    name stands for "Generalized Regular Expression Parser".
\index{grep}

regular expression
:   A language for expressing more complex search strings. A regular
    expression may contain special characters that indicate that a
    search only matches at the beginning or end of a line or many other
    similar capabilities.

wild card
:   A special character that matches any character. In regular
    expressions the wild-card character is the period.
\index{wild card}

Exercises
---------

**Exercise 1: Write a simple program to simulate the operation of the
`grep` command on Unix. Ask the user to enter a regular
expression and count the number of lines that matched the regular
expression:**

~~~~
$ python grep.py
Enter a regular expression: ^Author
mbox.txt had 1798 lines that matched ^Author

$ python grep.py
Enter a regular expression: ^X-
mbox.txt had 14368 lines that matched ^X-

$ python grep.py
Enter a regular expression: java$
mbox.txt had 4175 lines that matched java$
~~~~

**Exercise 2: Write a program to look for lines of the form:**

~~~~
New Revision: 39772
~~~~

**Extract the number from each of the lines using a regular expression
and the `findall()` method. Compute the average of the
numbers and print out the average.**

~~~~
Enter file:mbox.txt
38444.0323119

Enter file:mbox-short.txt
39756.9259259
~~~~
