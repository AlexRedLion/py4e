%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 391.000000 202.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14 (Build 18A391) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 391 202
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 391 202
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /T put
dup 34 /u put
dup 35 /P put
dup 36 /r put
dup 37 /o put
dup 38 /g put
dup 39 /a put
dup 40 /m put
dup 41 /S put
dup 42 /O put
dup 43 /C put
dup 44 /K put
dup 45 /E put
dup 46 /s put
dup 47 /c put
dup 48 /k put
dup 49 /e put
dup 50 /t put
dup 51 /n put
dup 52 /d put
dup 53 /v put
dup 54 /w put
dup 55 /period put
dup 56 /p put
dup 57 /y put
dup 58 /four put
dup 59 /aacute put
dup 60 /i put
dup 61 /space put
dup 62 /W put
dup 63 /b put
dup 64 /eight put
dup 65 /zero put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<



0A000D5D00BA000F001900032BB8000F10BA0023000500032BB8002310303113343E0233321E0215140E0223222E0227141E0233323E0235342E0223220E02851C3C5E41415E3C1C1C3C5E41415E3C1C5F2B5680555580562B2B5680555580562B0165366954333354693636695433335469364987683D3D6887494987683E3E688700000002004E0000026202CA000800130089B800152FBA0001000900032BB8000110B8001510B80010DCB80005DC410500DA000500EA000500025D411B0009000500190005002900050039000500490005005900050069000500790005008900050099000500A9000500B9000500C90005000D5DB8000110B8000BD000B8000A2FBA0009000100032BB8000910BA0000000C00032BB800001030311311333216151406270111331133163635342623ADBA514B4B51FEE75FDA6C6F6F6C0174010643404044010156FD360124017064646F0000010025FFF0026302DB0039008DBA001E001F00032BB8001E10BA0029001400032BB8002910B8001E10B8000BDC410500DA001400EA001400025D411B0009001400190014002900140039001400490014005900140069001400790014008900140099001400A9001400B9001400C90014000D5DB80032DCB8002910B8003BDC00BA0019002400032BB8001910BA0006003700032BB8000610303101332E0323220E0215141E0615140E0223222E023523141E0233323E0235342E0635343E0233321601EB5A0229475E37315D492C2741525552412720344120284C39235A2F516B3C31635033274152555241271B2D3A1E4A5F01F93B55381A19334F363141291913121D2E2527321D0C142A412D415F3D1E1733513935462E1B14111A2921232F1C0C45000000000100020000023D02CA00070027BA0003000000032BB800031000B800012FBA0006000700032BB8000610B8000710B80003D030311311331133352115F05FEEFDC5027AFD86027A505000000001000C0000039202CA000F003500B800012FB800052FB800092FB800002FB8000B2FBA000400000001111239BA000800000001111239BA000E0000000111123930312113230323032303230323133313331302D3BF5F91029E67A0028C61B763A502A302CAFDAE0252FDAE0252FD360258FDA800020024FFF5020A021100300042015CB800142BBB00380003000D00182BBB002A0003001700182BB8001710B80005D0B800052F4111000600380016003800260038003600380046003800560038006600380076003800085D4105008500380095003800025DB8003810B900200003F4B9001F0003F4B8001710B900300003F4B8001710B80031D0B800312FB8002A10B80044DC00B800014558B800252F1BB9002500083E59B800014558B800022F1BB9000200043E59B800014558B800082F1BB90008


23000D0010111239B8000310B80028D0B800282FBA002900000003111239B8001B10B8002CDC00B800012FB8000E2FB800192FBA0026000800032BB8002610B8000810B80013D0B8002610B80020D0303113113311343E0233321E0215113311343633321E0215113311342E02232206072E01232207233540550F2135251D25160955483F1F27160855192D3F2733551A104E306D3A020205FDFB01420F2D2A1E111F2A19FEAD01423C48121F2A18FEAD017B283924112E2A3028584C00000000010040000001EC021100170045BA0003000000032BB8000310BA000E000B00032BB8000E10B8000310B80015D0B800152FBA00160000000311123900B800012FB8000C2FBA0013000800032BB8001310303113113311343E0233321615113311342E022322072335405513263927313855112A44337335020205FDFB0124233B2C183830FEA201542A45321C5E520000020024FFF5021A02110013002700CBB800282FB800292FB8002810B80014D0B800142FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8002910B8001EDCB8000ADC410500DA000A00EA000A00025D411B0009000A0019000A0029000A0039000A0049000A0059000A0069000A0079000A0089000A0099000A00A9000A00B9000A00C9000A000D5D00BA000F001900032BB8000F10BA0023000500032BB8002310303113343E0233321E0215140E0223222E0227141E0233323E0235342E0223220E027E192C3B21213B2C19192C3B21213B2C195A20405E3D3E5D402020405D3E3D5E402001022F49321A1A32492F2F49311A1A31492F39624929294962393963492A2A4963000000020043FF3B022D02110018002C00ADB8002E2FBA0018000000032BB8001810B80002D0B8001810B80004D0B800042FB8002E10B8000EDCB8001810B80016D0B800162FB8000E10B80019DC410500DA001900EA001900025D411B0009001900190019002900190039001900490019005900190069001900790019008900190099001900A9001900B9001900C90019000D5DB8001810B80023D0B800232F00B800012FBA0013002800032BB8001310BA001E000900032BB8001E10303113113311331E0333323E0235342E0223220607233505140E0223222E0235343E0233321E024355020E292E2F133B593B1D1E3B593C365A1502013B10243B2C2C3E271211263C2B293D27130205FD36010A171F12082A49623737624B2C272B46FE2648382221364726244637222036450000000001003D0000014D0213000E0027BA0003000100032BB8000310B8000DD0B8000D2F00B800012FBA0009000800032BB8000910303113113335343E0233352606


00>] def
/CharStrings 36 dict dup begin
/.notdef 0 def
/space 1 def
/period 2 def
/zero 3 def
/four 4 def
/eight 5 def
/C 6 def
/E 7 def
/K 8 def
/O 9 def
/P 10 def
/S 11 def
/T 12 def
/W 13 def
/a 14 def
/b 15 def
/c 16 def
/d 17 def
/e 18 def
/g 19 def
/i 20 def
/k 21 def
/m 22 def
/n 23 def
/o 24 def
/p 25 def
/r 26 def
/s 27 def
/t 28 def
/u 29 def
/v 30 def
/w 31 def
/y 32 def
/aacute 33 def
/acute 34 def
/uni2B91 35 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934E06C41B32DC0FC18729379BB636705CDC80E0195EDA5D7E95EF520C6FF0E35D27E29E83B3B5D03F887059303E41B17A106D1EED9511CA87A86CA140E77CE939647D098D793B387C21BA81EC5C256DC8B47303C0F423AC2B8AD567DEACEBDF1E5AA5333851D314FA900795C1217524436F58024A19E38965BA1D31A019F0964BC0FD1A1F2942BD65A0723977B1B03B4FBF53FD460C13156C1691FB5BA8624256088330B4A7349620C746124062E3CED64F850396D2EA47EF88056822BD6899BDE51F008ED1F0A55EF901EE2EB8349700411396685CE9CF8A0BD4F026CDA7CC087A0B63F1CB28E992B6D271B6884E0E6BCD9D495491CF507A9D3153735DC79909B7CDC427B842C362EB2D63E17D6486E52A1453C00B50E8B8F7030A39C5B11E6EE2EF2FCB95F0E3161455006F812B64D34F3670034BF6608C3257098D92EF6FC33243F6056BC65EFE52B99A677B940731AECDD2193DCE8A426F5D2174C859B75367C8372449FACF9FF4DE7674C4F4EE0C921D56CDCDD344145357C0CC70DD987EE114F47DE9373CDC24534E309BB5E752D319B7681C3404630958FA79E1922BDC286F72857BC273A903D8095E5B75FAB6FD73FB324012D69A466FB88D8E2FDC54FD8679421937DAD7DB238A2BCCCC2DC3F878B1607359D6F31E3696E894AD36314AE6DC83CD079E62189D8C581946340A68917B36A41EA91ED40518C20B001D1C10F7A8CA9811CF355AF6AC20267CD7730C8E807682168CFE1B13BDD5F4870128A524E2DBFF6AB7BFDB4B294248620FB84084E819
9C6F251F1D744D6339F8A93832307C159FFE9B1B21C1DFE30A6324569452BD364227FB2916B8CED305256FC92E4FC7097C886E158E61F0F96699494EA50F0A21263FECDC2725C651AA38F8B2380C19D31C19238AF29E4808B4D9795D8655C37CFC5592AF372B3066618E10035114F519B95C770448AE7B0D1DAA97CD14C2AF5CD5E1702877A6E2266BB60A34D212842A5E466AD966963D4BD1D2B5AC1C3D41B1D62A8444AAC3C9D9A674BCA40583E04116AFE9D8874D879C89A28405E1929C97D991B14AE903B896D14793F3401C9BA84CA3D02C609A02F044943F3C19A4B3E4BDB84CA3CB831C3C1CE8C9B5492807BB2F2BA7CAA7270D0C1EC81CCB09678871DA7217B7B80E6D71AF6355742D31EB4CA85A26C569CBEE0F2B5CA6AE7E5BFF2C0E9DD4C5EB399ABC6E4C2EB4C4CAA8DA26E33E40B6FFF1723EEC847E388A30BA67E284CF2A7BE8D2460CD3DA2C17BF5247C9FEC9A5B81416C59E8C6D1CC40214123AAA1DD1EC5CD346019D437DA73302E7B5EA7F25C830A64F44E337B99BCDC5783067EA8CE5EC895496A6C104B4085A8258EF3961C03265EFB3983AF66F6E6400A7A1B0D59571871102F02C347A14382151121FEEDC18DD2D3D482BF6E208A268EC1FE6060CAB159BB6D6578B3EFB144302CCDC9619B79FEED0203B7C2335BC032A52305482E0DAB2579E7AF0FB4972E853F55A466DC9DFFDF24BB2EA3B97517619DFFA44BBB85B774C0BABD7EB1F87F0015FDD5CD114193CCBB99CB001AD9341D54909E4C82F4B690928F20529CC5D0AF850843C2327C66729FB45A6F61A1E40741FA16F1459F010E24981C0DF59209CDE4DD041CA964D80C139A29B01C0C88BACD661E908D1DFAE0C36A2A07DB7FD7454E01C4304AA60C4EA6F4394E90EA8967DAFAE5EE799A8510B116D43693A5FCB76481CE693F2EE718A85DBF0E292CE8B69DEE66E67B339FC36592357B229B3AF75C241EBC8A70A6B30E63BE0F402AE92F4BE321A2925FDE2FFF1B660D3554234CDCC5F123C50BD2747FB2FC9CF96E6229E6D56B73EB0396D8E9830D6F4D0D288F9DD5D203DE3D5B9F9C02545E216E6464C0655FD12763D199E13DE054B86869D3ABED9285CD52F6B85A377BD4CF31F11D2169BCFFD541F191521AB478D39762BD5379A877B857DCB9E57315B85DCF2B26211F8E4D3ACB0C2421248C366D28529C63FC19D5CE2057DCA94AB5AFD722F543757EAFE9A77E8AE833DCF6B5277A2F7D53CD893565855AED58DCA4EBCCEBB3E679BB16957B05DD6F36335C5D2C948826DD193C6A9917FCCE27C4141C7DAED7DCEBCF5B537901A18BF666FB5B2DDEBEC4A3181D0CE308B308F38B6D014E0B66ACDE1CDCB6D7811885EB576FBA508BA2BFDCFC6E074F9D6327C23C2E317E4D263E9EDC9D77F42BC00D2FC9E2E61B2D2C358806EE3F0922033925BBCC0C1D4DF

0110C180CB859558AB6AEC89E946A2A4E592957D772DCAB3B86D038D982A99D365ABA875C58E2CD1566E81D5B346B63DE947579B086E7D8E8FCA4FCEEEFC52CA77F10DE4F13756FCC35A4794FEAB888BA5C59D20C50334A6A44E92FD1AF2FDE793160FAB19CE40E1670CAD318F698FB5424D013516B82F1A11B3F7274B08A4B9E49405F63314DD18D590C035C784FAFDA06A9CF2721137AE8B5D37D763CEA8DC96C9D95230E968E1B15A17CA2ABF95D5401379193EC5A7FF80C71F5567C1E81A887EDADE26E45179698C5A8B89EB2965201005DC5A44C014D07FB90BBC77C88AAE5D1BE599C810A175A382BBD84D1D15726F72A0A98D835D975AC0F349B2EAE3C70545225BD496F956F6DA9A57D110B2A9892B9EF12AF064726D909EFAB5C71E98033FAE0245DD7F5A097E2B9DEAED36CC1A4187C67E95ED351D99AC1A5C371B3BB6EF028F238D40B5198D9D63D8902EF7BC9FD9F6E2ED6B46F93B779FC2FB191DAB7D2B1410995C506B7D57CF2939B3DA433A2EDF55D355591E778F0495A8FC2EA670FB12AF1A7BA7E486A028D41FFF2508163726B8B3576CB7374CC6B125FC5C26808E2DFCA2E5286DFE14DB9D7C9C9DB75FAA8CA8A1464C21BAC5BD1671F1B44A8AA374E11D3023035DB6117444928CFFC845A42D05FEBBCB19EB683C95ABC9D8B741C708130B2ACCD3EBD047E5DD031B66BB60D9BB600B7617F64B436C259CCC015E109934A76348C8B87CE0F4C2CEF9F0084760D83119AA8672E12BDB57C6049916E537A1114DCC8DC7560708F97917894FE647F157D968A51DA998D6C54E34CCB2F97F96E67CB7FCEFA9B8636E8DFD2AC68AF74E44677A74D2C96AC135B7735838EA5F67F0C43EE7F72C1EB4F08E197E8DB205E80B467B7AA2D5BC907BA0AE7A1E62CAF872C9E2DBB1B63DA11D638522AE7EF59B3E25ABBAD506AFB2AC58F19D53084C127B01CB19DE8622EC1EA483751DB8E9277B384EBC14CD107009648AD34169E8A98EFEC83F109A5B67EF7D67518E2F3693272DE26CA5BBC50DBBB4848FC02FE305DF5793C85D61006AAD0642A6BD06D30F1FCA588BF10DC97F25B0E14D4AF2BE279C2793CE2218DF9D7AB720C03965989D3875636227E7F687FDBA33496A5310BA5C34C841B8E2BD87601488E9C3AE8076BD95A75F470A24A1134F2ADE9687FD17891AFA76A83F246A3DA5B937A9793FFACB70C02D68AA98B46048028B4B81610679826C5CE1C875CD7D744258F4A7576EEB754D545DD391BE7FA0A1D5015168D8BFB87B8C3EE3CC0B1802E8E6CC90B4E5A7D4EE846B0E306A89C1D2FE0A33379F4D43A01891BF2397B412EF8C99F5D3369D2F336C8901FC61FE804B12D26DF7CC59D34748355F80E2B4C7E8AEB4B7ECDA7FD7927A25D61CAAA0801FD1A2FF4254B4DC100B0F125201EA39CE672396F8962A6CE43C6034E8E6F1
D87A3CA1FEBFFC822330B6225EC42F57204958CD02361D25A414DAD1028127E2243D52B4822D6699E40988B337A6850968EF21AE0A61FE2A3EA69488335F5FC11EDD213692015F3492FE0F4EBE37D52014E210120BE14CD76BCFE7F31B65DA27CB9FB72C64BA81B0147191201E240BB1234B06694963CDC7CFFD6CAB038BB5627E8779C61E9ED2AE2D2167B9886611DE53CB04A9A7BB868C507716B3960FB979DA25AD4099BB1C8F55C55788868439D2DF526DDBBCE5749420E91453C3C4AFACD59BDE7C1541025C38C978E5295ECE0FDFD1CA4A76FA0D6F83766A1B34178FFEDFF7DD0AFC964EB66356694DA156ADB3FA9B96B096E7743B350C9E2B178B0BF2BC0416EF2C7315EFA97B20BECB656A5B626EBCCD4DDE613591ADFA6666C942A9C84944D99924F3BEC251347E6F7FB320B8E1467466E1ED7894EAECC29A829F13001727AC94F9503749CBA0CD72D24E8DCA8EBAF1DB7D75C29DECD953D24CA290377F284D8248EC9F50D333E10B605CA41EE0BFA763A52B26DC0AEF03FAA16F7C9BFF97F7D169F8409BFB2D8E8AD9514B0DC392F6A0DBD4670777A4E77E6F4E78CB00D9F5C6F88DA3368BCE93A23A8BA55527768DA993300E486FB3F20C0553A488E16183D5B1C67C1BDEE677CCBD4B0BB637DFCF704A4177F53FB67681961621C4A906B8D114CCB2CDC12AA4A5229B6DF816999E5F0214833FA879E1AF1871E4DE3A04CF8E1B31307C4465BE7EBE9AEFACC207841549BD4855D9B19CFC98DD6661237594243DF332C0324D117D436492EDFA2CB35729D6DB427F2C26860A0BDBB4CD2E3B8D6F07E19A8A26DAC0C9EC0CD2AABDA8A13FA215E9A167F5598D988EC2B2CB0F7F48C65812AD06EF33F33F723E62A9D261DF4DD92255E75CADEEF0C59E2263D06FEA65C0A21291D3BFB5C95495936E794D9412483B63AF0C747177926E98B4239FD26ACA688D21DE9407D7CE39C85B3D628C24681690F5E784F0E9AB05A32AD8319968126BE8BFAA7C1F346865665A569A1781B66D5F530A3D6CFE832933672C90F3D4A98ABDAD896C5B5BA0F894E0F7B81FC00CA03F83F517CC1F34BB8BD6853ADB6D54BC5B825878113ABBF85FA1102EA950D979D63B6FF8FA230091936E2A415275218CD5BA659EB62CE962E970AEF207F8A47DAE6BAB0AACC1BCD50C9554ABC636EB8B2BD0A134ADA0E5DC40BB3867581D11A41EB68945162E79C63259E409BC31B9CD3AB57222A532D18C9559BDD9F5501C2E03D8BC2460E9DB020286AEADBBB125775B2BC51410FF42F8D3418C9049F45BF952D394D92554BAE37C0D849B3596041937AA464DE17FB60C4526CF59D047B7BD5508040E987FE35159CEAEBA9BE9849B5AB1919793DD8DDA67C9491CCA62F1499D883E5F47ECCE92EE4030C7C19267AD2CBEC9787D994AE632B7C1B90E48319FB99ACD6332BCDA

851726B8E58FB694A5B1A3364BD6E4CEBDC3405A733502D90F1C1598882F4707A3B101B6A1EE5A3CD1CD08C46C455668E0644C678079099387409453E703B1659AC4C4582EAC360F4783503FCBED0CA299D04EE1E29FADAC6CE7D2A2F254910328F92FA475A370B7138907EB7ED44629B04196BD90DA66D6F030D8DE060AC954802E4D9504E50FA97F7FA91DA76139B13EA736F64F55D6EFEC4A01CE2FB58217B177E11BFE824E225AAA6CBFAFECEA69DAEC7FA3AF4BB689B496395D2F8536F43BCA381F84343DB3894DA804A0C7AC6744EB59DF8ABE377CE928140CD43FAC87116A728E515D54A24CC5FF071BB68D3E501A1CD89EA764A399B29637C69CE5A50D1D3F45643FF7700CBEB8570DF00076F04F60FB74FE3D36AACBA52DBF7B19D1244C5DF2B3CCBA6DC7CAA61DBF789308192316181C06F39352D4A773AF486A8405AA53045FE27AFA4E1DDC35E046B3E78D76B439BE4D2FA701F75F6BC383FACE74164D3E8E761125B349C054CDB8474933BF98A6D638C99BB3812270F300A567DED32467614008576FBDB7F12B3B2886AE09497703D6D662D2CEF2AB7622DB6D39DDD0380E47C62C0491A048
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 391 202 rc
-16 218 m
529 218 l
529 -276 l
-16 -276 l
h
-16 218 m
f
2 200 m
137 200 l
137 20 l
2 20 l
h
2 200 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -16 218 cm
18 18 m
153 18 l
153 198 l
18 198 l
h
18 18 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 69.5 110 cm
/F1.1[ 16 0 0 -16 0 0]sf
-8.3039999 -70 m
(!")[ 7.712000 0.000000 ] xS
-34.967999 -51.552002 m
(#$%&$'\(')[ 10.368000 5.040000 9.184000 9.184000 5.328000 8.592000 13.648000 0.000000 ] xS
/Cs1 SC
0 0.74901962 0.75294119 sc
CM
119 146 m
146 146 l
146 38 l
119 38 l
h
119 146 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -16 218 cm
135 72 m
162 72 l
162 180 l
135 180 l
h
135 72 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 132.5 92 cm
/F1.1[ 14 0 0 -14 0 0]sf
-4.5359998 -36.175995 m
(\))s
-5.3200002 -19.783997 m
(*)s
-5.0539999 -3.3919983 m
(+)s
-4.6690001 13 m
(,)s
-4.277 29.391998 m
(-)s
-4.0180001 45.783997 m
(!)s
/Cs1 SC
1 1 1 sc
CM
47 146 m
119 146 l
119 119 l
47 119 l
h
47 146 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -16 218 cm
63 72 m
135 72 l
135 99 l
63 99 l
h
63 72 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 83 132.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-23.856001 5.776001 m
(.%/012)[ 8.000000 9.184000 8.592000 8.304000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
47 119 m
119 119 l
119 92 l
47 92 l
h
47 119 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -16 218 cm
63 99 m
135 99 l
135 126 l
63 126 l
h
63 99 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 83 105.5 cm
-28.896 5.776001 m
(/%331/2)[ 8.592000 9.184000 8.896000 8.896000 8.592000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
47 92 m
119 92 l
119 65 l
47 65 l
h
47 92 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -16 218 cm
63 126 m
135 126 l
135 153 l
63 153 l
h
63 126 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 83 78.5 cm
-17.488001 5.776001 m
(.134)[ 8.000000 8.592000 8.896000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
47 65 m
119 65 l
119 38 l
47 38 l
h
47 65 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -16 218 cm
63 153 m
135 153 l
135 180 l
63 180 l
h
63 153 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 83 51.5 cm
-15.112 5.776001 m
($1/5)[ 5.040000 8.592000 8.592000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
208.98659 90.365417 m
175.53125 101 188.87241 190.5257 242.24113 175.25 c
247.19258 205.02722 309.25323 200.19405 308.84753 175.25 c
347.76147 207.15375 397.49115 143.53831 364.13516 111.63458 c
404.16068 96.166817 363.63007 12.82862 330.78125 26.75 c
328.15234 3.54638 269.42853 -4.5735998 264.27423 26.75 c
231.02174 -6.7020998 161.68501 44.732361 208.98659 90.365417 c
h
208.98659 90.365417 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -16 218 cm
224.98659 127.63458 m
191.53125 117 204.87241 27.4743 258.24115 42.75 c
263.19257 12.97278 325.25323 17.80596 324.84753 42.75 c
363.76147 10.84626 413.49115 74.461678 380.13516 106.36542 c
420.16068 121.83318 379.63007 205.17139 346.78125 191.25 c
344.15234 214.45361 285.42853 222.57359 280.27423 191.25 c
247.02174 224.7021 177.68501 173.26764 224.98659 127.63458 c
h
224.98659 127.63458 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 285.5 95.5 cm
-55.400002 -49.119995 m
(666789:17/%\()[ 12.128000 12.128000 11.248000 4.448000 9.488000 8.000000 8.896000 8.592000 4.448000 8.592000 9.184000 0.000000 ] xS
-46.807999 -12.671997 m
(#;&<3'.=>1?)[ 10.368000 8.592000 9.184000 3.552000 8.896000 8.592000 8.000000 4.448000 13.904000 8.592000 0.000000 ] xS
-2.224 5.776001 m
(7)s
-2.224 24.223999 m
(7)s
-2.224 42.671997 m
(7)s
/Cs1 SC
0 0.74901962 0.75294119 sc
CM
146 110 m
227 110 l
227 83 l
146 83 l
h
146 110 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -16 218 cm
162 108 m
243 108 l
243 135 l
162 135 l
h
162 108 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 186.5 96.5 cm
-16.66 5.776001 m
(#%$2=@A)[ 10.368000 9.184000 5.328000 5.040000 4.448000 8.896000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
