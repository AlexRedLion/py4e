%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 475.000000 328.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14 (Build 18A391) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 475 328
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 475 328
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /S put
dup 34 /e put
dup 35 /r put
dup 36 /v put
dup 37 /i put
dup 38 /c put
dup 39 /o put
dup 40 /A put
dup 41 /l put
dup 42 /q put
dup 43 /u put
dup 44 /t put
dup 45 /m put
dup 46 /oacute put
dup 47 /s put
dup 48 /R put
dup 49 /a put
dup 50 /H put
dup 51 /V put
dup 52 /p put
dup 53 /n put
dup 54 /space put
dup 55 /d put
dup 56 /j put
dup 57 /P put
dup 58 /I put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<

206A61645258238A592FFD2DB800192C4B20B0032650585158B080441BB04044591B21212045B0C05058B0C0441B2159592DB8001A2C2020456944B001602020457D691844B001602DB8001B2CB8001A2A2DB8001C2C4B20B003265358B0401BB000598A8A20B0032653582321B0808A8A1B8A235920B0032653582321B800C08A8A1B8A235920B0032653582321B801008A8A1B8A235920B0032653582321B801408A8A1B8A235920B80003265358B0032545B8018050582321B8018023211BB003254523212321591B2159442DB8001D2C4B535845441B2121592D00020033000101CC02C8000300070065B800142BB800082FB800002FB8000810B80006D0B800062FB900020003F4B8000010B900040003F4B80009DC00B800014558B800042F1BB90004000A3E59B800014558B800052F1BB9000500043E59B8000410B900000002F4B8000510B900020002F4303101211121131121110199FECD013333FE67029AFD950299FD3902C70002FFFA0000029002CA0003000B002500B800042FB800052FB800092FBA0000000700032BB8000010BA00020005000411123930311B0133130301333721173301C9790277ABFEEA6150012E4E69FEE90127014DFEB301A3FD36D7D702CA00000001004E0000028402CA000B0047BA000B000000032BB8000B10BA0006000500032BB8000610B8000B10B80002D0B8000510B80008D000B800002FB800072FB800012FB800052FBA000A000300032BB8000A1030311311331121113311231121114E5F01785F5FFE8802CAFD360147FEB902CAFECD01330000010052000000B102CA00030017BA0003000000032BB800031000B800012FB800002F303113113311525F02CAFD3602CA0000000002004E0000026202CA000800130089B800152FBA0001000900032BB8000110B8001510B80010DCB80005DC410500DA000500EA000500025D411B0009000500190005002900050039000500490005005900050069000500790005008900050099000500A9000500B9000500C90005000D5DB8000110B8000BD000B8000A2FBA0009000100032BB8000910BA0000000C00032BB800001030311311333216151406270111331133163635342623ADBA514B4B51FEE75FDA6C6F6F6C0174010643404044010156FD360124017064646F000002004E0000029002CA0020002B009DB8002D2FBA0023000000032BB8002310B80002D0B8002D10B8001DDCBA001A0000001D111239B80027DC410500DA002700EA002700025D411B0009002700190027002900270039002700490027005900270069002700790027008900270099002700A9002700B9002700C90027000D5D00B800012FB8000E2FBA0000002300032BB8000010BA0022000300032BB8002210BA001A0003002211123930311311331133321E02171E03

0006001C0016001C0026001C0036001C0046001C0056001C0066001C0076001C0086001C0096001C00A6001C00B6001C00C6001C000D5D410500D5001C00E5001C00025D00BA0017001000032BB8001710BA0006002100032BB8000610B80000DCB8001010B80014DC303101332E0323220E0215141E0233323637230E0123222E0235343E02333216019F5805263B4D2C3D5C3D1E1F3D5B3B63730E5708473F283A241110253E2E3640015F2E432C152B4B653A3A61462668603C4220354424274938223600000000020024FFF5020E02CA0013002C00BBB8002D2FBA0015001600032BB8001510B8002D10B80022D0B800222FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8001610B8000AD0B8000A2FB8001610B80018D0B800182FB8001610B8002AD0B8002A2FBA002B00220015111239B8001610B8002CD000B800152FBA000F002700032BB8000F10BA001D000500032BB8001D10303137343E0233321E0215140E0223222E0205112311232E0323220E0215141E023332363733157E10243C2B2C3E271211263C2B293D2713019055020E292E2E143B593B1D1E3B593C365A1502FE264838222136472624463722203645DA02CAFEF6171F13082B49623737624A2C262B46000000020024FFF502030211000A0026005BBA0014001F00032BB8001410BA0015000000032BB8001510B8001410B80001D0B8000010B8000CD0B8000C2F00BA000F002400032BB8000F10BA001A000600032BB8001A10BA0001001400032BB8000110B8002410B8000CDC303101213E0333321E0217230E0123222E023721362E0223220E02151E0333323601A7FED702162635212035271754540B45362A3E28120101830215375B4535594124021F3E5B3E587401341E352817172736AE33321C2F3D222F6858392848623B3B64482858000200450000009A02CA00030007002FBA0001000200032BB8000110B8000210B80004D0B8000110B80006D000B800052FBA0001000000032BB800011030311335231D011133119A5555026268685DFDFB0205000002FFF3FF3B009A02CA000300130037BA0004000E00032BB8000410B80000D0B8000410B80002DCB80006D000BA000A001100032BB8000A10BA0001000000032BB80001103031133523151311231114062B0122262715163332369A555555141C120407051417394302626868FD5D0246FDC8281F010149043F0000000100450000009A02CA00030017BA0003000000032BB800031000B800012FB800002F303113113311455502CAFD3602CA00000000010040000003150211002A00B7BA0003000000032BB8000310B8000DDC4103005F000D00015D41

47262446372220364500000000020024FF3B020E02110013002C00A9B8002D2FBA0015000A00032BB8001510B8002D10B80022D0B800222FB80000DC411B0006000000160000002600000036000000460000005600000066000000760000008600000096000000A6000000B6000000C60000000D5D410500D5000000E5000000025DB8000A10B80017D0B800172FB8000A10B8002AD0B8002A2FB8000A10B8002CD0B8002C2F00B800142FBA001D000500032BB8001D10BA000F002700032BB8000F10303137343E0233321E0215140E0223222E0201112315232E0323220E0215141E023332363733117E10243C2B2C3E271211263C2B293D2713019055020E292E2E143B593B1D1E3B593C365A1502FE264838222136472624463722203645FE6102CA45171F13082B49623737624A2C262BFEF50000000001003D0000014D0213000E0027BA0003000100032BB8000310B8000DD0B8000D2F00B800012FBA0009000800032BB8000910303113113335343E02333526060723353D55142C4833455A1F020205FDFBE6324D361C5A023C3F6D000001001FFFF501D60211003A00ABBA0000000100032BBA0020001F00032BB8002010BA0031001F0020111239B800312F410500DA003100EA003100025D411B0009003100190031002900310039003100490031005900310069003100790031008900310099003100A9003100B9003100C90031000D5DB8000BDCB8000010B8002ADCB80015DCB8000B10B8003CDC00BA0036000600032BB8003610BA0025001A00032BB8002510B8000610B80000DCB8002510B8001FDC303137231E0333323E0235342E02272E0335343E0233321E0217332E0323220E0215141E0415140E0223222E02745502243C4E2B274F3F271D2F3D201E3C301F142027131529221602550322394A2C22453723324B584B3218252C141A312718A3304329120F263E2F2532211407070D131D1614190F06091421192F3F250F1123382732381F11152221181F10060A1727000100090000011D02A00017005BBA0001000200032BB8000110B8000210B80006D0B8000310B80007D0B8000210B80017DCB8000DD0B8000110B80014D000B800012FBA000F000C00032BB8000F10BA0004000500032BB8000410B80000D0B8000510B80015D030311335231523153311141E023B013523222E0235113335B65558580E1D2F21412714190E056702059B9B4BFEB7242C18094B030A120F01414B00000000010040FFF501EC020500180051BA000C000D00032BB8000C10BA0001000200032BB8000110B8000210B80016D0B800162FBA001700020001111239B8000210B80018D0B800182F00B800012FB8000C2FBA0008001300032BB8000810303121112311140E0223222635112311141E0233323637331501EC5513263927313855

00>] def
/CharStrings 29 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/H 3 def
/I 4 def
/P 5 def
/R 6 def
/S 7 def
/V 8 def
/a 9 def
/c 10 def
/d 11 def
/e 12 def
/i 13 def
/j 14 def
/l 15 def
/m 16 def
/n 17 def
/o 18 def
/p 19 def
/q 20 def
/r 21 def
/s 22 def
/t 23 def
/u 24 def
/v 25 def
/oacute 26 def
/acute 27 def
/uni2B91 28 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934F323ED524132524E29CF103DD77B595E6E1561F78AAB02F338FA5FA237800BCD0D2F049AE10D80561D1088C4F81B337B270E015AFAFA12A6349C09CA68AFE26B3E59B3698F119D3001C294BFA29301EA68BCD653BE66E1F694FF7AFEAD5E1272AC94A43F98EDC6FC877BBD52D1327009B27FD43C8FB002387C954FDCCE91B365BE04B2715A0BE38BC5C3353638EE45A569C4792FE0E5BD1887F4BBF1EA2E5B94A3BECABA6575D632675F7CF14BAEAA84D594CD1C7E51754C1C2CD4B08C68603E38FF75BD2B419396533BAD4A294F6598D29212A53D9F44D09188C6D591C1BC1037417C9A1EBC39250AD04E520D264EA63B3828E93EEB19205C8D1E6E9F151CFEAEC809BE8A297F415CC9F197F4F20FE2E5719583617CDB299595603D017391D4DBF2C93831359FDF9152754E93C8F178B15DD07BBE9499DA2B2AF92F85F1447C0A5B1425E57ED0D63B607352D1702067A9C6A64A5027BAA339BBF9FE34D1F4BF24E749B0392559627B56F08351B908D60FFEC519CDCADA78D0894804FBB799903D9303392124D792EDFCCF509D531980D2C4B943AD5C99B370737AAD4EC3A99C30B3D8EA9E707D8009B4B08AA97415F0707F8E8058A5E8871EF8A0EF65E1F128BACA86EB544D4C82563D7A4877B20E1D7F8964BD61C81365AE388906F65380DBC463ABC09B0FA6B3EFBCC7D920874DDC847F4CA2C50827474B8625A1DA35AD0AF4B0029F73A7A780E98B08B6386B6D62FD308B0D1FE8054C9F411B0608622BA5424AEE4DC73373C382B5716B84EB94FF725B409
04E2798A6DF840DBCF5182CF11D3ABB09D2B40A56319AE3AE73B3E24691B33F277D286F1A833A520BBE07CB73ED638C399E6A9951325954552E143215AAB466D0DD3CC0E3442359D7AB1EBE676F7978737AC9C2B0344613D22511ED62AE8CA77BE2F2D036C7D4C36DC2649F75DBFB0A996EFB122CFA1FF7F91B7F00DEF8A26AF73985B4A91195BB64E40A207BA963838966432EE4B2799E2103B7D9DFA230AB71650E642CD076A0F5C9320F07B9D7BE667709849DF4B5724716E4C4326DAD382B634E8F6B1A59BE490CEAFD3FE40C49B691D088C41FE39EC9B76DAA890AEA37C3D1BCF038A79E766ADF4B9E7CFCF8EFF79F53CFEA04A663F17B142D460467476284A2D78426987DCAA963D589A47F7C776FD91F5107FC392F22762DC35741B39F707DFA861A0D6B66797EED8DFC62D6C026E1B51D23DCDDEB18CE8E5B6C00BF028AE81E57501FED29ABEFEC7201200A80795956414643BF2D0593C52706C9C7D3DDD8A2E1523F0FC48EB8DBA592FCCAF31A702564A9D3C4AE55122766847082B7BDDAD8D5500783640D6D53236EA55AFF9D4782F8AD92F73DF61B496E191135B776BBA3BFC0D6BC01D798E26F44AA1D9BB324D2F386C2ECC460612B0A5293900A252B11D2865704B73ED63A79A8231AA1A73443458B8584BD4DEA77D635B33CDCA58EF2F8AEE63A64ACCD15D905F1BA983E469A64EA6973145A09077F517E934416B85A7D308C69FDF144C7604D268F0488D68A3B2F7FA679D4EA72367B0A3B17C950748C31BCC8C353999028138906BEEB538CB8C2EF0A7AD698287080A04AE7E7C011F2C82E45BE6FD66434B88933728EC0AA17CF96E9033C6A5C05A037CC7A0E34CAD1BFE1CA1825D2B2269D8362547DB5D2438F175C10D2FFD946A61DE60181F038E22F8C4B03AA1375E01BC92D512179C25894B1B27FB25791126C77C6F381D432A3FB51FE9F30AF7C65E8C6892F2AB18333397EF9FB20A24599F1BA64B20F5D0360D9FC1E211826EA13319FEBD0ED0058383FDB0450D7D01DCB80DF8877219AEB82675A9EC46CF3CAA19FE3A37C9F41871B396B59E486B80020BBF7204BD13979861E757B07E83DC71B3DF8893C1B2C87A19EE55554FA9CF0957F92CE503AE4FC2BC8AA4F28E7AE8CE1E0C2EDA6C94AC53430A49234004B60426C515F1C13F05463D562C0059E150A49FADC7D8E1A7A146B15A36FAF0B1B406029FC8C641239B07F758FDE93B7A0CD1DAC39AE1F77B0CDCA82FD1CC091117EE5D280DC372BA0DC73B392C2BA5FEF97F1925B1BAE20EEECF471C0F43ED9266D30CF6D4E711A32CE1014F91D029BB7288B4461357567ADC3E1F4836D0DB183350250B857B288E328AF4122055C1F59F037BAD320C3D7EA61573488E7A2D2C5454C649955F98BE36CCAAE528B8FEC003D2D5C367208EFFA9D6A261CB9A25674C67A5E5E69E

914EFBEE02EE18B52825E5AB7EBD78BC813D53783BD7BDEFA734F9747BC14159CCBC704B57EE7041003C529A0E904074CECE2F7611926A93E149649DB3435B96A77B17CF30C75685A96B594A66FB997F8E203227F1ADF7CB130A7FC31C222871E1187368A2AFEB8EEF4B2396C6AFD9189D7B14DBF5A1DDD7E3F596152EC1D40C815205428C4E5091A9EDE441AB1027879EF4C7826E9356681D23631BA81992D386A04FA6FC96E03AF6A41356328ED8AB7CEFDD074C74BB5A5690466E80A0F3B83B1A7BD14ADEC0C90E4EBEE1D6575F5543B4D7C04D00EA6C4BF3286EEE071A865E9C9EB82A09DF67F184A60E494D779BE4C3870755D4A7042D229C65FF1AD5B90FD5C13723D9577505918E38546331AB47E57B30D5DC616C624BEE04CF72E3318247D64DDF60EFADCC2BF6BA9E2E1219C27DC3754514617CFCF55B960CF4B8FEFBA669DE438B44A150650A6E67C81205F6237E052E0EB25555713F8D949C8C77C3A1FC4858D05306996F44B2A36DB089DC05F1D5ABE0B460266E778E2BFAD3A0C98735325CE77E422A074B9E8B8C6F2E40590863A15BA188183379E25A4AE73815C65FCAA254FF6FF0F065D884C784B0F1422F680DF7C84961095A17A0D996241965D7F95B5C5F1CB33ACBCAB1F9CB5D64FD5C737A99B36C32BEA057DD4CCDDE741C3188DB8E5EAF1DCEF1F36CC3E3AF62E91E93D4BDAD533264C5930DBA9D025397CF2F0EC8C353F5BDC87215655606F4F884ADFBC14E1E55B2BA172155AB0B6D0E625F56F8A47180AFE20FE987758987F74809FBE8ABB57C48CAD83D5A6FB0E57640C2798F52AD637300DAF91BC9C083066B526D95070FF73AEACE671D271E5F3728BA52D3F8604E07FF70BBF2EB6586F125B7D19D09A5FC7DFB4414B652B00458C736E09FDD48943D84ECA7874379E8A4D3CACDD49E2398EACC09776C0D18FA4417BC713161A7F8C558E86E299225529EC44588F1206A9177A3375F2EDF23F6DF6340734122049972F78AEBF7C729FE851C5132AAC30360440844A75BEF534E5955FA2072BA412A0DD7C80669A6EF927F3527CFFD169A0B407BCAD4CC712D9379883432FE542E3C4D88C0BC9CABF56236EE052C55BB344668104FFB5BDF90C983B80E0C4CA7E2988747A31BE5127B13463ACD4D3A30136768520BAA611BB45CD948F5FEA1BF2A5BA3618EFA7E4E3F94356113BACCD71F113B6E6BDFF2024E1F93AEFCB7A1E5FD8DB0A643532AC6AE415C8FF44F1D8276E70D5537B9BCAE34E864B833C1BE2672000A486C9E77D07FCA1C13DC171C48AA373195E176170F769C6E28B3D1586B16000123CDC736EA5B5E1CAE5D5657683332F5B1B9337356103E0F2615A43C7435E182A7816595060E8FCDCAFFF49EEB8DC1BBE08DFE089082A72EA479305A4A0DA2660356226A283B338B0E90D01E19438D3C41EE40052845
5CA42869033D5CFA2D42B1B4F756993D19614B29D0CEB28DCA2170B0A04F48DDB2D60BA659EB9D600FB66863A36097C436FD1F661FB3192E22BA2FDB9B92226EC6D7A52A2DAB96FCF13DFA4354290F592D6031E9D825715B41445536C44BF6656F85D4B1104EB20C8E7213150E5A9E601DC7D78BEAC4D64F14031A64BC1613E3B9576DD471E6E5A100F1A6D3B389905BECB588DD3C30DE4440B15F24E7B08CC58D7F6DAF01865EE43832CA9C8CC06F8FC5A7EE34F892FB5472B416B24923F5EC38AF56472FCCE9C48D79A0A241359303A26697B8A032F8270BEF3177A0AC5510101555BF64BFEA579EDD478C6435E91D4FED706FA0FEB374D7BCCF8C3F23B82554527B349693900469DF9AD246B352DB60A04EB05D35FB7CAA2E4A62F3D187778692B19079094C4560D8B753A0E80A9C1131576CD90919D1B7E52986AB1293641C3BD2EAC2A4BC40CD62FE120F2C59346CA295960FAEEAED1F94F96A5E2E762FB669CE88043E36665489A108AE93906DC7BCBA8286D537276AE46F3FD52C20E14892763FDE98E00C8C0F870851C590A98D9EB56CAE2DD50FA8EEB240F696D452F03E45046F12D1EB0D5374EBE8F8901EFE6E32CD492DBA83C44A760CB819BFB2DDEE551541D3131F1D6E26704405CAD0374A369153C25EFED33B0F130F6E29CA96F5060F55F8A0D263C2A0A9DD31068231C76DD5470947B2B95F5F7457C8B00F4659CFCFF2638C63A2C36BE90943E79555ADD6D72F19E7B6963773ED131F8ED881F61A52D0C8152610A7DF4F5A143F523D906FFAC45075758519CAA3EBA0CE266E5D776BCA2266B41BED2E10932991958286028BC1F67A4EA53FCB8E253741C468B1CC4BF876FAE1D8714125168350E8A8C42285CDBA247B17D29113678849AD45C84F04F07E7B5BAD9B987D3FD8AA3E892DB68F7E8346D710B1D5C4B4F46592474FF765C725C52CAD482CBFD12DD5AE1C8315BEE8050F7F29E27A6D692A71F82D52B05E2FAC03BEDEB531B57151C184FF7D25BD237AB2D99DD089CE0A5B661F3FD973A8BC59FD708FE22AC5C87385346596713A06F6B2269E4E39E82A60C1D67599F7500F9A8910BCB29ABDBC60215DAEA04485575406B38797BD1A0109BC5DCE4766030568C10C0CDED6437400C514195E5C6EC155A1FCE5F6932C48632A686F5554E3EA810D24867D722BF111B179C72543CFD621BACB53813850EBD528F96A1EEE5B1E5A8271
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 475 328 rc
-13 338 m
644 338 l
644 -142 l
-13 -142 l
h
-13 338 m
f
0.22745098 0.55686277 0.92941177 sc
21.164391 271.18271 m
-2.59375 276.5 6.8804002 321.26285 44.779942 313.625 c
48.296181 328.51361 92.368248 326.09702 92.080132 313.625 c
119.71466 329.57687 155.02994 297.76917 131.34236 281.81729 c
159.76628 274.0834 130.98367 232.41431 107.65625 239.375 c
105.78935 227.77319 64.086922 223.7132 60.42662 239.375 c
36.812538 222.64896 -12.42658 248.36618 21.164391 271.18271 c
h
21.164391 271.18271 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
34.164391 66.817291 m
10.40625 61.5 19.8804 16.73715 57.779942 24.375 c
61.296181 9.4863901 105.36825 11.90298 105.08013 24.375 c
132.71466 8.42313 168.02994 40.230839 144.34236 56.182709 c
172.76628 63.916592 143.98367 105.58569 120.65625 98.625 c
118.78935 110.22681 77.086922 114.2868 73.42662 98.625 c
49.812538 115.35105 0.57341999 89.63382 34.164391 66.817291 c
h
34.164391 66.817291 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 75.5 276.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-28.584 -12.671997 m
(!"#$%&%')[ 10.368000 8.592000 5.328000 8.000000 3.552000 8.592000 3.552000 0.000000 ] xS
-26.664 5.776001 m
(\(\)*+%\)"#)[ 10.368000 3.552000 9.488000 8.896000 3.552000 3.552000 8.592000 0.000000 ] xS
-44.007999 24.223999 m
(\(+,'-.$%\)"/)[ 10.368000 8.896000 5.040000 9.184000 13.648000 9.184000 8.000000 3.552000 3.552000 8.592000 0.000000 ] xS
/Cs1 SC
0.87058824 0.67843139 0.14901961 sc
CM
168.94661 271.18271 m
144.21875 276.5 154.07961 321.26285 193.52606 313.625 c
197.18582 328.51361 243.05675 326.09702 242.75687 313.625 c
271.51935 329.57687 308.27606 297.76917 283.62164 281.81729 c
313.20572 274.0834 283.24832 232.41431 258.96875 239.375 c
257.02563 227.77319 213.62108 223.7132 209.81139 239.375 c
185.23346 222.64896 133.98457 248.36618 168.94661 271.18271 c
h
168.94661 271.18271 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
181.94661 66.817291 m
157.21875 61.5 167.07961 16.73715 206.52606 24.375 c
210.18582 9.4863901 256.05676 11.90298 255.75687 24.375 c
284.51935 8.42313 321.27606 40.230839 296.62164 56.182709 c
326.20572 63.916592 296.24832 105.58569 271.96875 98.625 c
270.02563 110.22681 226.62108 114.2868 222.81139 98.625 c
198.23346 115.35105 146.98457 89.63382 181.94661 66.817291 c
h
181.94661 66.817291 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 225.5 276.5 cm
-28.584 -12.671997 m
(!"#$%&%')[ 10.368000 8.592000 5.328000 8.000000 3.552000 8.592000 3.552000 0.000000 ] xS
-29.032 5.776001 m
(0"/"#$1)[ 10.960000 8.592000 8.000000 8.592000 5.328000 8.000000 0.000000 ] xS
-27.256001 24.223999 m
(2',"\)"/)[ 11.552000 9.184000 5.040000 8.592000 3.552000 8.592000 0.000000 ] xS
/Cs1 SC
0.94901961 0.3764706 0.46666667 sc
CM
339.94662 271.50497 m
315.21875 276.5 325.07959 318.54996 364.52606 311.375 c
368.18582 325.36127 414.05676 323.09113 413.75687 311.375 c
442.51935 326.36008 479.27606 296.48013 454.62164 281.49503 c
484.20572 274.22986 454.24832 235.08617 429.96875 241.625 c
428.02563 230.72633 384.62109 226.9124 380.81137 241.625 c
356.23346 225.91264 304.98459 250.07126 339.94662 271.50497 c
h
339.94662 271.50497 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
352.94662 66.495033 m
328.21875 61.5 338.07959 19.45005 377.52606 26.625 c
381.18582 12.63873 427.05676 14.90886 426.75687 26.625 c
455.51935 11.63991 492.27606 41.519878 467.62164 56.504971 c
497.20572 63.77013 467.24832 102.91383 442.96875 96.375 c
441.02563 107.27367 397.62109 111.0876 393.81137 96.375 c
369.23346 112.08735 317.98459 87.928741 352.94662 66.495033 c
h
352.94662 66.495033 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 396.5 276.5 cm
-28.584 -12.671997 m
(!"#$%&%')[ 10.368000 8.592000 5.328000 8.000000 3.552000 8.592000 3.552000 0.000000 ] xS
-29.032 5.776001 m
(0"/"#$1)[ 10.960000 8.592000 8.000000 8.592000 5.328000 8.000000 0.000000 ] xS
-23.704 24.223999 m
(3+"\)'/)[ 9.184000 8.896000 8.592000 3.552000 9.184000 0.000000 ] xS
/Cs1 SC
0.85490197 0.85490197 0.85490197 sc
CM
173 59 m
293 59 l
293 2 l
173 2 l
h
173 59 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
186 279 m
306 279 l
306 336 l
186 336 l
h
186 279 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 233 30.5 cm
-48.448002 -3.447998 m
(\(4\)%&1&%.567"6)[ 10.368000 9.488000 3.552000 3.552000 8.592000 8.592000 8.592000 3.552000 9.184000 8.896000 4.448000 9.488000 8.592000 0.000000 ] xS
-20.888 15 m
(3%18"/)[ 9.488000 3.552000 8.592000 3.552000 8.592000 0.000000 ] xS
/Cs1 SC
0.87058824 0.67843139 0.14901961 sc
CM
226.9516 228.88753 m
234.90523 214.12305 l
231.15697 214.00877 l
235.40701 74.607079 l
239.15527 74.721352 l
232.11586 59.499767 l
224.16225 74.264252 l
227.91049 74.378525 l
223.66045 213.78023 l
219.91219 213.66594 l
h
226.9516 228.88753 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
239.9516 109.11246 m
247.90523 123.87695 l
244.15697 123.99123 l
248.40701 263.39291 l
252.15527 263.27866 l
245.11586 278.50024 l
237.16225 263.73575 l
240.91049 263.62146 l
236.66045 124.21978 l
232.91219 124.33405 l
h
239.9516 109.11246 m
S
0 i
0.87058824 0.67843139 0.14901961 sc
CM
167 197 m
287 197 l
287 167 l
167 167 l
h
167 197 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
180 141 m
300 141 l
300 171 l
180 171 l
h
180 141 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 227 182 cm
-12.44 5.776001 m
(\(9:)[ 10.368000 10.368000 0.000000 ] xS
/Cs1 SC
0.22745098 0.55686277 0.92941177 sc
CM
103.16487 233.2901 m
117.5692 224.70143 l
114.41103 222.67943 l
209.55362 74.07576 l
212.71179 76.097755 l
214.48344 59.421089 l
200.07912 68.009766 l
203.23729 70.031761 l
108.0947 218.63544 l
104.93653 216.61343 l
h
103.16487 233.2901 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
116.16487 104.70989 m
130.5692 113.29857 l
127.41103 115.32057 l
222.55362 263.92426 l
225.71179 261.90225 l
227.48344 278.57892 l
213.07912 269.99023 l
216.23729 267.96823 l
121.0947 119.36456 l
117.93653 121.38657 l
h
116.16487 104.70989 m
S
0 i
0.22745098 0.55686277 0.92941177 sc
CM
83 152 m
203 152 l
203 122 l
83 122 l
h
83 152 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
96 186 m
216 186 l
216 216 l
96 216 l
h
96 186 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 143 137 cm
-12.44 5.776001 m
(\(9:)[ 10.368000 10.368000 0.000000 ] xS
/Cs1 SC
0.94901961 0.3764706 0.46666667 sc
CM
386.63657 233.75754 m
383.57474 217.26889 l
380.58319 219.53012 l
266.88028 69.103836 l
269.87183 66.842613 l
254.84383 59.398872 l
257.90564 75.887512 l
260.89719 73.626289 l
374.6001 224.05257 l
371.60855 226.3138 l
h
386.63657 233.75754 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
399.63657 104.24246 m
396.57474 120.73111 l
393.58319 118.46989 l
279.88028 268.89615 l
282.87183 271.15738 l
267.84384 278.60114 l
270.90564 262.11249 l
273.89719 264.37372 l
387.6001 113.94743 l
384.60855 111.6862 l
h
399.63657 104.24246 m
S
0 i
0.94901961 0.3764706 0.46666667 sc
CM
257 152 m
377 152 l
377 122 l
257 122 l
h
257 152 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -13 338 cm
270 186 m
390 186 l
390 216 l
270 216 l
h
270 186 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 317 137 cm
-12.44 5.776001 m
(\(9:)[ 10.368000 10.368000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
